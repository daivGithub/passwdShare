{"remainingRequest":"/Users/daiv/files/GitProjects/passwdShare/passwd-share-front/node_modules/babel-loader/lib/index.js!/Users/daiv/files/GitProjects/passwdShare/passwd-share-front/src/libs/excel.js","dependencies":[{"path":"/Users/daiv/files/GitProjects/passwdShare/passwd-share-front/src/libs/excel.js","mtime":1562030992321},{"path":"/Users/daiv/files/GitProjects/passwdShare/passwd-share-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/daiv/files/GitProjects/passwdShare/passwd-share-front/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFhMU1ggZnJvbSAneGxzeCc7CgpmdW5jdGlvbiBhdXRvX3dpZHRoKHdzLCBkYXRhKSB7CiAgLypzZXQgd29ya3NoZWV0IG1heCB3aWR0aCBwZXIgY29sKi8KICB2YXIgY29sV2lkdGggPSBkYXRhLm1hcChmdW5jdGlvbiAocm93KSB7CiAgICByZXR1cm4gcm93Lm1hcChmdW5jdGlvbiAodmFsKSB7CiAgICAgIC8qaWYgbnVsbC91bmRlZmluZWQqLwogICAgICBpZiAodmFsID09IG51bGwpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgJ3djaCc6IDEwCiAgICAgICAgfTsKICAgICAgfQogICAgICAvKmlmIGNoaW5lc2UqLwogICAgICBlbHNlIGlmICh2YWwudG9TdHJpbmcoKS5jaGFyQ29kZUF0KDApID4gMjU1KSB7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAnd2NoJzogdmFsLnRvU3RyaW5nKCkubGVuZ3RoICogMgogICAgICAgICAgfTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgJ3djaCc6IHZhbC50b1N0cmluZygpLmxlbmd0aAogICAgICAgICAgfTsKICAgICAgICB9CiAgICB9KTsKICB9KTsKICAvKnN0YXJ0IGluIHRoZSBmaXJzdCByb3cqLwoKICB2YXIgcmVzdWx0ID0gY29sV2lkdGhbMF07CgogIGZvciAodmFyIGkgPSAxOyBpIDwgY29sV2lkdGgubGVuZ3RoOyBpKyspIHsKICAgIGZvciAodmFyIGogPSAwOyBqIDwgY29sV2lkdGhbaV0ubGVuZ3RoOyBqKyspIHsKICAgICAgaWYgKHJlc3VsdFtqXVsnd2NoJ10gPCBjb2xXaWR0aFtpXVtqXVsnd2NoJ10pIHsKICAgICAgICByZXN1bHRbal1bJ3djaCddID0gY29sV2lkdGhbaV1bal1bJ3djaCddOwogICAgICB9CiAgICB9CiAgfQoKICB3c1snIWNvbHMnXSA9IHJlc3VsdDsKfQoKZnVuY3Rpb24ganNvbl90b19hcnJheShrZXksIGpzb25EYXRhKSB7CiAgcmV0dXJuIGpzb25EYXRhLm1hcChmdW5jdGlvbiAodikgewogICAgcmV0dXJuIGtleS5tYXAoZnVuY3Rpb24gKGopIHsKICAgICAgcmV0dXJuIHZbal07CiAgICB9KTsKICB9KTsKfSAvLyBmaXggZGF0YSxyZXR1cm4gc3RyaW5nCgoKZnVuY3Rpb24gZml4ZGF0YShkYXRhKSB7CiAgdmFyIG8gPSAnJzsKICB2YXIgbCA9IDA7CiAgdmFyIHcgPSAxMDI0MDsKCiAgZm9yICg7IGwgPCBkYXRhLmJ5dGVMZW5ndGggLyB3OyArK2wpIHsKICAgIG8gKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShkYXRhLnNsaWNlKGwgKiB3LCBsICogdyArIHcpKSk7CiAgfQoKICBvICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkoZGF0YS5zbGljZShsICogdykpKTsKICByZXR1cm4gbzsKfSAvLyBnZXQgaGVhZCBmcm9tIGV4Y2VsIGZpbGUscmV0dXJuIGFycmF5CgoKZnVuY3Rpb24gZ2V0X2hlYWRlcl9yb3coc2hlZXQpIHsKICB2YXIgaGVhZGVycyA9IFtdOwogIHZhciByYW5nZSA9IFhMU1gudXRpbHMuZGVjb2RlX3JhbmdlKHNoZWV0WychcmVmJ10pOwogIHZhciBDOwogIHZhciBSID0gcmFuZ2Uucy5yOwogIC8qIHN0YXJ0IGluIHRoZSBmaXJzdCByb3cgKi8KCiAgZm9yIChDID0gcmFuZ2Uucy5jOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7CiAgICAvKiB3YWxrIGV2ZXJ5IGNvbHVtbiBpbiB0aGUgcmFuZ2UgKi8KICAgIHZhciBjZWxsID0gc2hlZXRbWExTWC51dGlscy5lbmNvZGVfY2VsbCh7CiAgICAgIGM6IEMsCiAgICAgIHI6IFIKICAgIH0pXTsKICAgIC8qIGZpbmQgdGhlIGNlbGwgaW4gdGhlIGZpcnN0IHJvdyAqLwoKICAgIHZhciBoZHIgPSAnVU5LTk9XTiAnICsgQzsgLy8gPC0tIHJlcGxhY2Ugd2l0aCB5b3VyIGRlc2lyZWQgZGVmYXVsdAoKICAgIGlmIChjZWxsICYmIGNlbGwudCkgaGRyID0gWExTWC51dGlscy5mb3JtYXRfY2VsbChjZWxsKTsKICAgIGhlYWRlcnMucHVzaChoZHIpOwogIH0KCiAgcmV0dXJuIGhlYWRlcnM7Cn0KCmV4cG9ydCB2YXIgZXhwb3J0X3RhYmxlX3RvX2V4Y2VsID0gZnVuY3Rpb24gZXhwb3J0X3RhYmxlX3RvX2V4Y2VsKGlkLCBmaWxlbmFtZSkgewogIHZhciB0YWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTsKICB2YXIgd2IgPSBYTFNYLnV0aWxzLnRhYmxlX3RvX2Jvb2sodGFibGUpOwogIFhMU1gud3JpdGVGaWxlKHdiLCBmaWxlbmFtZSk7Cn07CmV4cG9ydCB2YXIgZXhwb3J0X2pzb25fdG9fZXhjZWwgPSBmdW5jdGlvbiBleHBvcnRfanNvbl90b19leGNlbChfcmVmKSB7CiAgdmFyIGRhdGEgPSBfcmVmLmRhdGEsCiAgICAgIGtleSA9IF9yZWYua2V5LAogICAgICB0aXRsZSA9IF9yZWYudGl0bGUsCiAgICAgIGZpbGVuYW1lID0gX3JlZi5maWxlbmFtZSwKICAgICAgYXV0b1dpZHRoID0gX3JlZi5hdXRvV2lkdGg7CiAgdmFyIHdiID0gWExTWC51dGlscy5ib29rX25ldygpOwogIGRhdGEudW5zaGlmdCh0aXRsZSk7CiAgdmFyIHdzID0gWExTWC51dGlscy5qc29uX3RvX3NoZWV0KGRhdGEsIHsKICAgIGhlYWRlcjoga2V5LAogICAgc2tpcEhlYWRlcjogdHJ1ZQogIH0pOwoKICBpZiAoYXV0b1dpZHRoKSB7CiAgICB2YXIgYXJyID0ganNvbl90b19hcnJheShrZXksIGRhdGEpOwogICAgYXV0b193aWR0aCh3cywgYXJyKTsKICB9CgogIFhMU1gudXRpbHMuYm9va19hcHBlbmRfc2hlZXQod2IsIHdzLCBmaWxlbmFtZSk7CiAgWExTWC53cml0ZUZpbGUod2IsIGZpbGVuYW1lICsgJy54bHN4Jyk7Cn07CmV4cG9ydCB2YXIgZXhwb3J0X2FycmF5X3RvX2V4Y2VsID0gZnVuY3Rpb24gZXhwb3J0X2FycmF5X3RvX2V4Y2VsKF9yZWYyKSB7CiAgdmFyIGtleSA9IF9yZWYyLmtleSwKICAgICAgZGF0YSA9IF9yZWYyLmRhdGEsCiAgICAgIHRpdGxlID0gX3JlZjIudGl0bGUsCiAgICAgIGZpbGVuYW1lID0gX3JlZjIuZmlsZW5hbWUsCiAgICAgIGF1dG9XaWR0aCA9IF9yZWYyLmF1dG9XaWR0aDsKICB2YXIgd2IgPSBYTFNYLnV0aWxzLmJvb2tfbmV3KCk7CiAgdmFyIGFyciA9IGpzb25fdG9fYXJyYXkoa2V5LCBkYXRhKTsKICBhcnIudW5zaGlmdCh0aXRsZSk7CiAgdmFyIHdzID0gWExTWC51dGlscy5hb2FfdG9fc2hlZXQoYXJyKTsKCiAgaWYgKGF1dG9XaWR0aCkgewogICAgYXV0b193aWR0aCh3cywgYXJyKTsKICB9CgogIFhMU1gudXRpbHMuYm9va19hcHBlbmRfc2hlZXQod2IsIHdzLCBmaWxlbmFtZSk7CiAgWExTWC53cml0ZUZpbGUod2IsIGZpbGVuYW1lICsgJy54bHN4Jyk7Cn07CmV4cG9ydCB2YXIgcmVhZCA9IGZ1bmN0aW9uIHJlYWQoZGF0YSwgdHlwZSkgewogIHZhciB3b3JrYm9vayA9IFhMU1gucmVhZChkYXRhLCB7CiAgICB0eXBlOiB0eXBlCiAgfSk7CiAgdmFyIGZpcnN0U2hlZXROYW1lID0gd29ya2Jvb2suU2hlZXROYW1lc1swXTsKICB2YXIgd29ya3NoZWV0ID0gd29ya2Jvb2suU2hlZXRzW2ZpcnN0U2hlZXROYW1lXTsKICB2YXIgaGVhZGVyID0gZ2V0X2hlYWRlcl9yb3cod29ya3NoZWV0KTsKICB2YXIgcmVzdWx0cyA9IFhMU1gudXRpbHMuc2hlZXRfdG9fanNvbih3b3Jrc2hlZXQpOwogIHJldHVybiB7CiAgICBoZWFkZXI6IGhlYWRlciwKICAgIHJlc3VsdHM6IHJlc3VsdHMKICB9Owp9OwpleHBvcnQgZGVmYXVsdCB7CiAgZXhwb3J0X3RhYmxlX3RvX2V4Y2VsOiBleHBvcnRfdGFibGVfdG9fZXhjZWwsCiAgZXhwb3J0X2FycmF5X3RvX2V4Y2VsOiBleHBvcnRfYXJyYXlfdG9fZXhjZWwsCiAgZXhwb3J0X2pzb25fdG9fZXhjZWw6IGV4cG9ydF9qc29uX3RvX2V4Y2VsLAogIHJlYWQ6IHJlYWQKfTs="},{"version":3,"sources":["/Users/daiv/files/GitProjects/passwdShare/passwd-share-front/src/libs/excel.js"],"names":["XLSX","auto_width","ws","data","colWidth","map","row","val","toString","charCodeAt","length","result","i","j","json_to_array","key","jsonData","v","fixdata","o","l","w","byteLength","String","fromCharCode","apply","Uint8Array","slice","get_header_row","sheet","headers","range","utils","decode_range","C","R","s","r","c","e","cell","encode_cell","hdr","t","format_cell","push","export_table_to_excel","id","filename","table","document","getElementById","wb","table_to_book","writeFile","export_json_to_excel","title","autoWidth","book_new","unshift","json_to_sheet","header","skipHeader","arr","book_append_sheet","export_array_to_excel","aoa_to_sheet","read","type","workbook","firstSheetName","SheetNames","worksheet","Sheets","results","sheet_to_json"],"mappings":"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","sourcesContent":["import XLSX from 'xlsx';\n\nfunction auto_width(ws, data){\n    /*set worksheet max width per col*/\n    const colWidth = data.map(row => row.map(val => {\n        /*if null/undefined*/\n        if (val == null) {\n            return {'wch': 10};\n        }\n        /*if chinese*/\n        else if (val.toString().charCodeAt(0) > 255) {\n            return {'wch': val.toString().length * 2};\n        } else {\n            return {'wch': val.toString().length};\n        }\n    }))\n    /*start in the first row*/\n    let result = colWidth[0];\n    for (let i = 1; i < colWidth.length; i++) {\n        for (let j = 0; j < colWidth[i].length; j++) {\n            if (result[j]['wch'] < colWidth[i][j]['wch']) {\n                result[j]['wch'] = colWidth[i][j]['wch'];\n            }\n        }\n    }\n    ws['!cols'] = result;\n}\n\nfunction json_to_array(key, jsonData){\n    return jsonData.map(v => key.map(j => { return v[j] }));\n}\n\n// fix data,return string\nfunction fixdata(data) {\n    let o = ''\n    let l = 0\n    const w = 10240\n    for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)))\n    o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)))\n    return o\n}\n\n// get head from excel file,return array\nfunction get_header_row(sheet) {\n    const headers = []\n    const range = XLSX.utils.decode_range(sheet['!ref'])\n    let C\n    const R = range.s.r /* start in the first row */\n    for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\n        var cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })] /* find the cell in the first row */\n        var hdr = 'UNKNOWN ' + C // <-- replace with your desired default\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\n        headers.push(hdr)\n    }\n    return headers\n}\n\nexport const export_table_to_excel= (id, filename) => {\n    const table = document.getElementById(id);\n    const wb = XLSX.utils.table_to_book(table);\n    XLSX.writeFile(wb, filename);\n}\n\nexport const export_json_to_excel = ({data, key, title, filename, autoWidth}) => {\n    const wb = XLSX.utils.book_new();\n    data.unshift(title);\n    const ws = XLSX.utils.json_to_sheet(data, {header: key, skipHeader: true});\n    if(autoWidth){\n        const arr = json_to_array(key, data);\n        auto_width(ws, arr);\n    }\n    XLSX.utils.book_append_sheet(wb, ws, filename);\n    XLSX.writeFile(wb, filename + '.xlsx');\n}\n\nexport const export_array_to_excel = ({key, data, title, filename, autoWidth}) => {\n    const wb = XLSX.utils.book_new();\n    const arr = json_to_array(key, data);\n    arr.unshift(title);\n    const ws = XLSX.utils.aoa_to_sheet(arr);\n    if(autoWidth){\n        auto_width(ws, arr);\n    }\n    XLSX.utils.book_append_sheet(wb, ws, filename);\n    XLSX.writeFile(wb, filename + '.xlsx');\n}\n\nexport const read = (data, type) => {\n    const workbook = XLSX.read(data, { type: type });\n    const firstSheetName = workbook.SheetNames[0];\n    const worksheet = workbook.Sheets[firstSheetName];\n    const header = get_header_row(worksheet);\n    const results = XLSX.utils.sheet_to_json(worksheet);\n    return {header, results};\n}\n\nexport default {\n  export_table_to_excel,\n  export_array_to_excel,\n  export_json_to_excel,\n  read\n}\n"]}]}