{"remainingRequest":"/Users/daiv/files/GitProjects/passwdShare/passwd-share-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/daiv/files/GitProjects/passwdShare/passwd-share-front/src/views/message/message.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/daiv/files/GitProjects/passwdShare/passwd-share-front/src/views/message/message.vue","mtime":1577168504907},{"path":"/Users/daiv/files/GitProjects/passwdShare/passwd-share-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/daiv/files/GitProjects/passwdShare/passwd-share-front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/daiv/files/GitProjects/passwdShare/passwd-share-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/daiv/files/GitProjects/passwdShare/passwd-share-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["message.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"message.vue","sourceRoot":"src/views/message","sourcesContent":["<style lang=\"less\">\n@import \"./message.less\";\n</style>\n\n<template>\n  <div class=\"message-main-con\">\n    <div class=\"message-mainlist-con\">\n      <div>\n        <Button @click=\"setCurrentMesType('unread')\" size=\"large\" long type=\"text\">\n          <div class=\"mes-wrap\">\n            <transition name=\"mes-current-type-btn\">\n              <Icon v-show=\"currentMessageType == 'unread'\" type=\"md-checkmark\"></Icon>\n            </transition>\n            <span class=\"mes-type-btn-text\">未读消息</span>\n            <Badge\n              class=\"message-count-badge-outer\"\n              class-name=\"message-count-badge-red\"\n              :count=\"unreadCount\"\n            ></Badge>\n          </div>\n        </Button>\n      </div>\n      <div>\n        <Button @click=\"setCurrentMesType('hasread')\" size=\"large\" long type=\"text\">\n          <div class=\"mes-wrap\">\n            <transition name=\"mes-current-type-btn\">\n              <Icon v-show=\"currentMessageType == 'hasread'\" type=\"md-checkmark\"></Icon>\n            </transition>\n            <span class=\"mes-type-btn-text\">已读消息</span>\n            <Badge\n              class=\"message-count-badge-outer\"\n              class-name=\"message-count-badge\"\n              :count=\"hasreadCount\"\n            ></Badge>\n          </div>\n        </Button>\n      </div>\n      <div>\n        <Button @click=\"setCurrentMesType('recyclebin')\" size=\"large\" long type=\"text\">\n          <div class=\"mes-wrap\">\n            <transition name=\"mes-current-type-btn\">\n              <Icon v-show=\"currentMessageType == 'recyclebin'\" type=\"md-checkmark\"></Icon>\n            </transition>\n            <span class=\"mes-type-btn-text\">回收站</span>\n            <Badge\n              class=\"message-count-badge-outer\"\n              class-name=\"message-count-badge\"\n              :count=\"recyclebinCount\"\n            ></Badge>\n          </div>\n        </Button>\n      </div>\n    </div>\n    <div class=\"message-content-con\">\n      <transition name=\"view-message\">\n        <div v-if=\"showMesTitleList\" class=\"message-title-list-con\">\n          <Table\n            ref=\"messageList\"\n            :loading=\"loading\"\n            :columns=\"mesTitleColumns\"\n            :data=\"currentMesList\"\n            :no-data-text=\"noDataText\"\n          ></Table>\n          <Page\n            :current=\"params.pageNumber\"\n            :total=\"total\"\n            :page-size=\"params.pageSize\"\n            @on-change=\"changePage\"\n            @on-page-size-change=\"changePageSize\"\n            :page-size-opts=\"[5,10]\"\n            size=\"small\"\n            show-total\n            show-elevator\n            show-sizer\n            class=\"page-fix\"\n          ></Page>\n        </div>\n      </transition>\n      <transition name=\"back-message-list\">\n        <div v-if=\"!showMesTitleList\" class=\"message-view-content-con\">\n          <div class=\"message-content-top-bar\">\n            <span class=\"mes-back-btn-con\">\n              <Button type=\"text\" @click=\"backMesTitleList\">\n                <Icon type=\"ios-arrow-back\"></Icon>&nbsp;&nbsp;返回\n              </Button>\n            </span>\n            <h3 class=\"mes-title\">{{ mes.title }}</h3>\n          </div>\n          <p class=\"mes-time-con\">\n            <Icon type=\"android-time\"></Icon>\n            &nbsp;&nbsp;{{ mes.time }}\n          </p>\n          <div class=\"message-content-body\">\n            <p class=\"message-content\" v-html=\"mes.content\">{{ mes.content }}</p>\n          </div>\n        </div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Cookies from \"js-cookie\";\nimport {\n  getMessageSendData,\n  editMessageSend,\n  deleteMessageSend\n} from \"@/api/index\";\nexport default {\n  name: \"message_index\",\n  data() {\n    const markAsreadBtn = (h, params) => {\n      return h(\n        \"Button\",\n        {\n          props: {\n            icon: \"md-eye-off\",\n            size: \"small\"\n          },\n          on: {\n            click: () => {\n              // 标记已读\n              let v = params.row;\n              // 转换null为\"\"\n              for (let attr in v) {\n                if (v[attr] == null) {\n                  v[attr] = \"\";\n                }\n              }\n              let str = JSON.stringify(v);\n              let data = JSON.parse(str);\n              data.status = 1;\n              this.loading = true;\n              editMessageSend(data).then(res => {\n                this.loading = false;\n                if (res.success) {\n                  this.$Message.success(\"操作成功\");\n                  this.unreadCount -= 1;\n                  this.hasreadCount += 1;\n                  this.$store.commit(\"setMessageCount\", this.unreadCount);\n                  this.refreshMessage();\n                }\n              });\n            }\n          }\n        },\n        \"标为已读\"\n      );\n    };\n    const deleteMesBtn = (h, params) => {\n      return h(\n        \"Button\",\n        {\n          props: {\n            icon: \"md-trash\",\n            size: \"small\",\n            type: \"error\"\n          },\n          on: {\n            click: () => {\n              // 移除\n              let v = params.row;\n              // 转换null为\"\"\n              for (let attr in v) {\n                if (v[attr] == null) {\n                  v[attr] = \"\";\n                }\n              }\n              let str = JSON.stringify(v);\n              let data = JSON.parse(str);\n              data.status = 2;\n              this.loading = true;\n              editMessageSend(data).then(res => {\n                this.loading = false;\n                if (res.success) {\n                  this.$Message.success(\"操作成功\");\n                  this.hasreadCount -= 1;\n                  this.recyclebinCount += 1;\n                  this.refreshMessage();\n                }\n              });\n            }\n          }\n        },\n        \"删除\"\n      );\n    };\n    const restoreBtn = (h, params) => {\n      return h(\n        \"Button\",\n        {\n          props: {\n            icon: \"md-redo\",\n            size: \"small\"\n          },\n          style: {\n            margin: \"0 5px 0 0\"\n          },\n          on: {\n            click: () => {\n              // 还原\n              let v = params.row;\n              // 转换null为\"\"\n              for (let attr in v) {\n                if (v[attr] == null) {\n                  v[attr] = \"\";\n                }\n              }\n              let str = JSON.stringify(v);\n              let data = JSON.parse(str);\n              data.status = 1;\n              this.loading = true;\n              editMessageSend(data).then(res => {\n                this.loading = false;\n                if (res.success) {\n                  this.$Message.success(\"操作成功\");\n                  this.recyclebinCount -= 1;\n                  this.hasreadCount += 1;\n                  this.refreshMessage();\n                }\n              });\n            }\n          }\n        },\n        \"还原\"\n      );\n    };\n    const deleteRealBtn = (h, params) => {\n      return h(\n        \"Button\",\n        {\n          props: {\n            icon: \"md-trash\",\n            size: \"small\",\n            type: \"error\"\n          },\n          on: {\n            click: () => {\n              // 彻底删除\n              let v = params.row;\n              this.loading = true;\n              deleteMessageSend(v.id).then(res => {\n                this.loading = false;\n                if (res.success) {\n                  this.$Message.success(\"操作成功\");\n                  this.recyclebinCount -= 1;\n                  this.refreshMessage();\n                }\n              });\n            }\n          }\n        },\n        \"彻底删除\"\n      );\n    };\n    return {\n      loading: true,\n      params: {\n        userId: JSON.parse(Cookies.get(\"userInfo\")).id,\n        status: 0,\n        pageNumber: 1, // 当前页数\n        pageSize: 10, // 页面大小\n        sort: \"createTime\", // 默认排序字段\n        order: \"desc\" // 默认排序方式\n      },\n      total: 0,\n      totalUnread: 0,\n      totalRead: 0,\n      totalRemove: 0,\n      currentMesList: [],\n      unreadMesList: [],\n      hasreadMesList: [],\n      recyclebinList: [],\n      currentMessageType: \"unread\",\n      showMesTitleList: true,\n      unreadCount: 0,\n      hasreadCount: 0,\n      recyclebinCount: 0,\n      noDataText: \"暂无未读消息\",\n      mes: {\n        title: \"\",\n        time: \"\",\n        content: \"\"\n      },\n      dictMessageType: this.$store.state.dict.messageType,\n      mesTitleColumns: [\n        {\n          type: \"index\",\n          width: 50,\n          align: \"center\"\n        },\n        {\n          title: \" \",\n          key: \"title\",\n          align: \"left\",\n          ellipsis: true,\n          render: (h, params) => {\n            return h(\"span\", [\n              h(\n                \"a\",\n                {\n                  style: {\n                    margin: \"0 30px 0 0\"\n                  },\n                  on: {\n                    click: () => {\n                      this.showMesTitleList = false;\n                      this.mes.title = params.row.title;\n                      this.mes.time = params.row.createTime;\n                      this.getContent(params.row);\n                    }\n                  }\n                },\n                \"【\" + params.row.type + \"】 \" + params.row.title\n              )\n            ]);\n          }\n        },\n        {\n          title: \" \",\n          key: \"time\",\n          align: \"center\",\n          width: 190,\n          render: (h, params) => {\n            return h(\"span\", [\n              h(\"Icon\", {\n                props: {\n                  type: \"md-time\",\n                  size: 16\n                },\n                style: {\n                  margin: \"0 5px 3px 0\"\n                }\n              }),\n              h(\"span\", params.row.createTime)\n            ]);\n          }\n        },\n        {\n          title: \" \",\n          key: \"asread\",\n          align: \"center\",\n          width: 210,\n          render: (h, params) => {\n            if (this.currentMessageType == \"unread\") {\n              return h(\"div\", [markAsreadBtn(h, params)]);\n            } else if (this.currentMessageType == \"hasread\") {\n              return h(\"div\", [deleteMesBtn(h, params)]);\n            } else {\n              return h(\"div\", [\n                restoreBtn(h, params),\n                deleteRealBtn(h, params)\n              ]);\n            }\n          }\n        }\n      ]\n    };\n  },\n  methods: {\n    changePage(v) {\n      this.params.pageNumber = v;\n      this.refreshMessage();\n    },\n    changePageSize(v) {\n      this.params.pageSize = v;\n      this.refreshMessage();\n    },\n    refreshMessage() {\n      let status = 0;\n      let type = this.currentMessageType;\n      if (type == \"unread\") {\n        status = 0;\n      } else if (type == \"hasread\") {\n        status = 1;\n      } else {\n        status = 2;\n      }\n      this.params.status = status;\n      this.loading = true;\n      getMessageSendData(this.params).then(res => {\n        this.loading = false;\n        if (res.success) {\n          this.currentMesList = res.result.content;\n          this.total = res.result.totalElements;\n        }\n      });\n    },\n    initMessage() {\n      this.params.status = 0;\n      getMessageSendData(this.params).then(res => {\n        if (res.success) {\n          this.unreadCount = res.result.totalElements;\n          this.initReadMessage();\n        }\n      });\n    },\n    initReadMessage() {\n      this.params.status = 1;\n      getMessageSendData(this.params).then(res => {\n        if (res.success) {\n          this.hasreadCount = res.result.totalElements;\n          this.initRemoveMessage();\n        }\n      });\n    },\n    initRemoveMessage() {\n      this.params.status = 2;\n      getMessageSendData(this.params).then(res => {\n        if (res.success) {\n          this.recyclebinCount = res.result.totalElements;\n          this.setCurrentMesType(\"unread\");\n        }\n      });\n    },\n    editMessage(status) {\n      editMessageSend().then(res => {\n        if (res.success) {\n          this.$Message.success(\"操作成功\");\n        }\n      });\n    },\n    deleteMessage(id) {\n      deleteMessageSend(id).then(res => {\n        if (res.success) {\n          this.$Message.success(\"删除成功\");\n        }\n      });\n    },\n    backMesTitleList() {\n      this.showMesTitleList = true;\n    },\n    setCurrentMesType(type) {\n      if (this.currentMessageType !== type) {\n        this.showMesTitleList = true;\n      }\n      this.currentMessageType = type;\n      if (type == \"unread\") {\n        this.noDataText = \"暂无未读消息\";\n      } else if (type == \"hasread\") {\n        this.noDataText = \"暂无已读消息\";\n      } else {\n        this.noDataText = \"回收站无消息\";\n      }\n      this.params.pageNumber = 1;\n      this.refreshMessage();\n    },\n    getContent(v) {\n      this.mes.content = v.content;\n    }\n  },\n  mounted() {\n    this.initMessage();\n  },\n  watch: {\n    // 监听路由变化通过id获取数据\n    $route(to, from) {\n      if (to.name == \"message_index\") {\n        this.initMessage();\n      }\n    }\n  }\n};\n</script>\n\n"]}]}